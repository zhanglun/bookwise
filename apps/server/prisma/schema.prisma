// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BookFormat {
  EPUB
  MOBI
  PDF
  TEXT
}

model Book {
  id                       Int                         @id @default(autoincrement())
  title                    String                      @unique
  cover                    String
  subject                  String
  description              String
  contributor              String
  source                   String
  format                   BookFormat
  page_count               Int
  isbn                     String
  path                     String
  publish_at               DateTime
  created_at               DateTime                    @default(now())
  updated_at               DateTime                    @updatedAt()
  authors                  AuthorBookRelationship[]
  publisher                PublisherBookRelationship[]
  additional_infos         BookAdditionalInfo?
  notes                    Note[]
  language                 Language                    @relation(fields: [language_id], references: [id])
  language_id              Int
  LanguageBookRelationship LanguageBookRelationship[]
}

model Language {
  id                       Int                        @id @default(autoincrement())
  code                     String                     @unique
  Book                     Book[]
  LanguageBookRelationship LanguageBookRelationship[]
}

model LanguageBookRelationship {
  book        Book     @relation(fields: [book_id], references: [id])
  book_id     Int
  language    Language @relation(fields: [language_id], references: [id])
  language_id Int
  created_at  DateTime @default(now())

  @@id([book_id, language_id])
}

model BookAdditionalInfo {
  id                       Int      @id @default(autoincrement())
  spine_index              String
  read_progress            Float
  read_progress_updated_at DateTime
  book                     Book     @relation(fields: [book_id], references: [id])
  book_id                  Int      @unique
}

model Author {
  id        Int                      @id @default(autoincrement())
  name      String                   @unique
  books     AuthorBookRelationship[]
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
}

model AuthorBookRelationship {
  book       Book     @relation(fields: [book_id], references: [id])
  book_id    Int
  author     Author   @relation(fields: [author_id], references: [id])
  author_id  Int
  created_at DateTime @default(now())

  @@id([book_id, author_id])
}

model Publisher {
  id        Int                         @id @default(autoincrement())
  name      String                      @unique
  books     PublisherBookRelationship[]
  createdAt DateTime                    @default(now())
  updatedAt DateTime                    @updatedAt
}

model PublisherBookRelationship {
  book         Book      @relation(fields: [book_id], references: [id])
  book_id      Int
  publisher    Publisher @relation(fields: [publisher_id], references: [id])
  publisher_id Int
  createdAt    DateTime  @default(now())

  @@id([book_id, publisher_id])
}

enum NoteType {
  TEXT
  RECT
}

model Note {
  id        Int      @id @default(autoincrement())
  book      Book     @relation(fields: [book_id], references: [id])
  book_id   Int
  type      NoteType
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
